/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import com.jtattoo.plaf.noire.NoireLookAndFeel;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;

import java.util.ArrayList;

import Processes.Process;

/**
 *
 * @author prabath s
 */
public class gui2 extends JFrame {

    /**
     * Creates new form gui2
     */
    int jobNo;
    int k;
    int st, at, iat, idt;
    int serviceTime;
    ArrayList<Process> processList = new ArrayList<Process>(); // Array list to store processes(jobs)
    int index = 0;// counter for process index
    int jobCount = 0;
    int speedVal;
    int timeSlice1;
    int lastArrivalTime;

    public gui2(int timeSlice) {

        this.timeSlice1 = timeSlice;
        jobNo = 1;
        k = 1;
        serviceTime = 0;
        speedVal = 1;
        lastArrivalTime = 0;
        initComponents();

        pack();
        setLocationRelativeTo(null);  // *** this will center the app ***
        ATime.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jobLbl = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        AddBtn = new javax.swing.JButton();
        ATime = new javax.swing.JTextField();
        STime = new javax.swing.JTextField();
        IATime = new javax.swing.JTextField();
        IDTime = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TA = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Speed = new javax.swing.JLabel();
        speed = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CPU Sheduler 2015 Input Wizard");
        setMaximumSize(new java.awt.Dimension(725, 349));
        setResizable(false);

        jobLbl.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jobLbl.setText("Job 1:");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Labels/labels/At.png"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Labels/labels/ST .png"))); // NOI18N

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Labels/labels/IRT .png"))); // NOI18N

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Labels/labels/IDT.png"))); // NOI18N

        AddBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Labels/labels/Add_new.png"))); // NOI18N
        AddBtn.setMaximumSize(new java.awt.Dimension(90, 40));
        AddBtn.setMinimumSize(new java.awt.Dimension(90, 40));
        AddBtn.setPreferredSize(new java.awt.Dimension(90, 40));
        AddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnActionPerformed(evt);
            }
        });

        STime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                STimeActionPerformed(evt);
            }
        });

        IATime.setToolTipText("after how much cpu burst time");
        IATime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                IATimeFocusGained(evt);
            }
        });
        IATime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IATimeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                IATimeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                IATimeMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                IATimeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                IATimeMouseReleased(evt);
            }
        });
        IATime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IATimeActionPerformed(evt);
            }
        });

        IDTime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                IDTimeFocusLost(evt);
            }
        });
        IDTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDTimeActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        TA.setEditable(false);
        TA.setColumns(20);
        TA.setRows(5);
        TA.setMargin(new java.awt.Insets(5, 2, 2, 2));
        jScrollPane1.setViewportView(TA);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Labels/labels/Schedule_new.png"))); // NOI18N
        jButton2.setMaximumSize(new java.awt.Dimension(90, 40));
        jButton2.setMinimumSize(new java.awt.Dimension(90, 40));
        jButton2.setPreferredSize(new java.awt.Dimension(90, 40));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Speed.setText("Speed:");

        speed.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Very fast", "Fast", "Normal", "Slow", "Very slow" }));
        speed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedActionPerformed(evt);
            }
        });

        jMenu1.setText("About");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jobLbl)
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ATime))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(STime, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(IATime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IDTime, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 8, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Speed, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(61, 61, 61)
                                .addComponent(speed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(55, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel3))
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jobLbl)
                                    .addComponent(ATime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(STime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel5))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(IDTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(IATime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Speed)
                            .addComponent(speed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IDTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDTimeActionPerformed

    private void AddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnActionPerformed
        int timeQuanta = timeSlice1;    //setting time quantum

        jobCount++;      //increment the job no
        int indicator1 = 0;   //this indicator is used to check negative inputs
        int indicator = 0;     //this indicator is used to compare I/O arrival time and Service time
        // check the job count ( maximum is 5 )
        if (jobCount >= 5) {
            ATime.setEnabled(false);            //disable the text fields
            STime.setEnabled(false);
            IATime.setEnabled(false);
            IDTime.setEnabled(false);
        }
        // TODO add your handling code here:
        try {
            if (!ATime.getText().equals("")) {              //check whether Arrival time is given and if given check whether the given value is an inteeger
                int num1 = Integer.parseInt(ATime.getText());
                if (num1 < 0) {
                    indicator1 = 1;
                }
            }
            if (!STime.getText().equals("")) {                  //check whether Service time is given and if given check whether the given value is an inteeger
                int num2 = Integer.parseInt(STime.getText());
                if (num2 < 0) {
                    indicator1 = 1;
                }
            }
            if (!IATime.getText().equals("")) {                 //check whether I/O Arrival time is given and if given check whether the given value is an inteeger
                int num3 = Integer.parseInt(IATime.getText());
                if (num3 < 0) {
                    indicator1 = 1;
                }
            }
            if (!IDTime.getText().equals("")) {                 //check whether I/O duration time is given and if given check whether the given value is an inteeger
                int num4 = Integer.parseInt(IDTime.getText());
                if (num4 < 0) {
                    indicator1 = 1;
                }
            };

        } catch (Exception e) {                     //if given inputs are not integers show an error message
            k = 0;
            JOptionPane.showMessageDialog(rootPane, "Inputs should be integers");
        }

        if (k == 1) {
            if (ATime.getText().equals("")) {                               //if Arrival time is not given show an error message
                JOptionPane.showMessageDialog(this, "Arrival Time Should Be Given!");
            } else if (STime.getText().equals("")) {                        //if Service time is not given show an error message

                JOptionPane.showMessageDialog(this, "Service Time Should Be Given!");
            } else if (IATime.getText().equals("") && !IDTime.getText().equals("")) {           //if I/O duration time is given and I/O arrival time is not given show an error message
                JOptionPane.showMessageDialog(this, "I/O Arrival Time Should Be Given!");
            } else if (!IATime.getText().equals("") && IDTime.getText().equals("")) {           //if I/O arrival time is given and I/O duration time is not given show an error message

                JOptionPane.showMessageDialog(this, "I/O Duration Time Should Be Given!");
            } else if (serviceTime + Integer.parseInt(STime.getText()) > 25) {                  //if service time exeeds 25 show an error message

                JOptionPane.showMessageDialog(this, "Total service time should be less than\n 25 seconds");
            } else if (jobNo != 1 && Integer.parseInt(ATime.getText()) < lastArrivalTime) {         //if arrival time of the new process is less than the previous process show an error message
                JOptionPane.showMessageDialog(this, "Arrival time of the new job should be greater than or equla to the Arrival time of the last job");
            } else if (Integer.parseInt(ATime.getText()) > 24) {                                    //if arrival time is greater than 24 show an error message
                JOptionPane.showMessageDialog(rootPane, "Arrival time must be less than 24");
            } else if (indicator1 == 1) {                                                       // if a given input is a negative number show an error message
                JOptionPane.showMessageDialog(this, "All inputs must be positive numbers");
            } else {
                if (!IATime.getText().equals("")) {                                             // show an error message if I/O arrival time is greater than Service time
                    if (Integer.parseInt(STime.getText()) <= Integer.parseInt(IATime.getText())) {
                        JOptionPane.showMessageDialog(this, "IO arrival time should be smaller than Service Time");
                        indicator = 1;               //value of the indicator changes to 1 if the value of the service time is less than I/O arrival time
                    }
                }
                if (indicator == 0) {       //check the comparison between the values of service time and I/O arrival time

                    //update the textarea in the interface
                    TA.append("Job" + jobNo + "\t  " + ATime.getText() + "\t" + "    " + "    " + "    " + STime.getText() + "\t" + "    " + "    " + "    " + IATime.getText() + "\t" + "    " + "    " + "    " + IDTime.getText() + "\n\n");
                    jobNo++;                //increment the job no
                    if (jobNo < 6) {                                        //update the job no value in user interface
                        jobLbl.setText("Job " + String.valueOf(jobNo) + ":");
                    }
                    st = Integer.parseInt(STime.getText());    //get the given value for the service time in interface
                    at = Integer.parseInt(ATime.getText());     //get the given value for the arrival time in interface
                    lastArrivalTime = at;                       //update the value of lastArrivalTime

                    if (!IATime.getText().equals("")) {
                        iat = Integer.parseInt(IATime.getText());       // if I/O operation is given get the I/O arrival time given at the interface
                        idt = Integer.parseInt(IDTime.getText());        // if I/O operation is given get the I/O duration time given at the interface
                        processList.add(new Process(at, st, timeQuanta, index, iat, idt));    //populate the process list with process objects

                        index++;                        //update the index 
                    } else {
                        processList.add(new Process(at, st, timeQuanta, index));            ////populate the process list with process objects
                        index++;            ////update the index 
                    }

                    serviceTime = serviceTime + st; //update the value of service time
                    ATime.setText(null);            // set the values of textfilds in interface to null
                    STime.setText(null);
                    IATime.setText(null);
                    IDTime.setText(null);

                }
            }
        }

        k = 1;

        ATime.requestFocus();
        if (jobCount >= 5) {  //if 

            JOptionPane.showMessageDialog(this, "The maximum allowed number of jobs has just reached! Please click \"Shedule\" to begin ", "CPU Sheduler", JOptionPane.INFORMATION_MESSAGE);
            jButton2.requestFocus();
        }
    }//GEN-LAST:event_AddBtnActionPerformed

    private void STimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_STimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_STimeActionPerformed

    private void IATimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IATimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IATimeActionPerformed

    private void IATimeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IATimeMouseEntered
        // TODO add your handling code here:


    }//GEN-LAST:event_IATimeMouseEntered

    private void IATimeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IATimeMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_IATimeMouseClicked

    private void IATimeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IATimeMouseExited
        // TODO add your handling code here:

    }//GEN-LAST:event_IATimeMouseExited

    private void IATimeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IATimeMouseReleased
        // TODO add your handling code here:


    }//GEN-LAST:event_IATimeMouseReleased

    private void IATimeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IATimeMousePressed
        // TODO add your handling code here:


    }//GEN-LAST:event_IATimeMousePressed

    private void IATimeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IATimeFocusGained
        // TODO add your handling code here:
        System.out.println("focus");

    }//GEN-LAST:event_IATimeFocusGained

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jobNo > 1) {
            OSGUI osgui = new OSGUI(processList, speed.getSelectedIndex() + 1); // create OSGUI form and set visible
            this.setVisible(false);
            osgui.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No processes to schedule");
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void IDTimeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IDTimeFocusLost
        AddBtn.requestFocus();
    }//GEN-LAST:event_IDTimeFocusLost

    private void speedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedActionPerformed
        // TODO add your handling code here:
        speedVal = speed.getSelectedIndex() + 1;
    }//GEN-LAST:event_speedActionPerformed

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        aboutUs abt = new aboutUs();
        abt.setVisible(true);
    }//GEN-LAST:event_jMenu1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        try {
            /* Create and display the form */
            javax.swing.UIManager.setLookAndFeel(new NoireLookAndFeel());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(gui2.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui2(1).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ATime;
    private javax.swing.JButton AddBtn;
    private javax.swing.JTextField IATime;
    private javax.swing.JTextField IDTime;
    private javax.swing.JTextField STime;
    private javax.swing.JLabel Speed;
    private javax.swing.JTextArea TA;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jobLbl;
    private javax.swing.JComboBox speed;
    // End of variables declaration//GEN-END:variables
}
